(function() {

	views.add('button', function() {
		
		// This here is the constructor function for this view.
		// In here we can define some default locally scoped variables or do some other stuff.
		// In this view right now, we don't need to use the constructor at all.
	
	}, {
		
		onStart: function() {

			// Every view has an onStart() and an onEnd() function.
			// Everything that the view creates in onStart() *should* be removed in onEnd()
			// (the view instance is released from the memory upon stopping anyway but it is
			// a good idea to take care of removing any DOM elements generated by the view).
		
			var that = this;
			
			this.intro = $('<div><h1></h1><div class="intro"></div></div>')
				.find('.intro')
					.html('<p class="firstLine">You have successfully launched this demo application running on Maverick MVC framework.</p><p>This demo is pretty simple and helps you understand how to build a controller and a view. This demo consists of 2 controllers and 2 views - buttonController and articleController.</p><p>When you press the "Launch articles" button below, the application state (or URI) is switched to <code>/articles</code>, and the articleController is launched. The articleController will then display some news articles and stop itself soon after, changing the URI back to <code>/</code> which is routed to the buttonController, the current controller.</p>')
					.end()
				.find('h1')
					.addClass('intro')
					.html('â˜… Welcome to Maverick!')
					.end()
				.appendTo('body');
				
			
			this.link = $('<div>')
				.addClass('launcher')
				.appendTo('body')
				.html('Launch articles')
				.click(function() {
					that.trigger('launch.articles');
				});
			
		},
		
		onStop: function() {
			this.link.remove();
			this.intro.remove();
		}
	
	});

}());
